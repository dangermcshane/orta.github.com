---
layout: on_being_2018
title: "33"
categories:
  - "on"
  - "being"
---

2019, whoah - hi there. So, I'm getting things back on track. I felt like being 32 was a passive year with a generally
downward curve. This year I worked hard to undo that and to try get back to feeling better. I succeeded at that.
Self-care is important in a period of uncertainty.

<p style="text-align:right">This write spends </p>

## Artsy

Well, it's over, after about 8 years of Artsy I handed in my notice. I am so deeply shaped by my experiences there. For
a lot of folks, a job is just a job - but my work at Artsy really was a core part of my identity. I grew alongside
Artsy. I joined as a small-town developer doing remote feature-work on an throwaway app, hired on a recommendation by a
friend.

Now, I'm recognized on the street in large cities, and almost permanently at places where developers hang. I contribute
to code and projects used by millions of programmers, with billions of users down the line. My [final blog
post][final-post] on the Artsy blog is one which tries to cover this story through my writing.

I owe Artsy, the company, a good amount of credit here. The culture we created allowed for someone who wanted to keep
pushing the scale of their impact to find ways for that to align with the companies goals.

I left because that aspect of the culture had changed and we made a few serious missteps which soured the daily
experience. There were two stand-out points which shook the foundations for the last two years: Artsy's leadership churn
and the introduction of a product org.

### Leadership churn

It's hard to believe that people in all these leadership roles left in the last two years, a lot didn't stay for a year
and most of these roles don't exist in anymore:

- Cofounder and COO
- CTO
- Legal Counsel
- Head of Design
- Head of Product
- Head of Marketing
- Head of Direct Sales
- Head of Auctions Partnerships

That's almost every business and product lead in the company. When the folks deciding the long term vision are in deep
disagreement to the point of leaving, it becomes real hard to get actual work done at the all levels of the company.

These vision disagreements caused fissures down the line via job role ambiguity, low morale, or defensiveness within
teams which feel threatened by the jostling.

There are ways to work around this, effective middle management can provide clarity umbrellas under their org and on
engineering we did a reasonable job there. At least, my one on ones with folks in our org treated most of these
departures as abstractly related to our work. Engineering was lucky there, but it's not great for cross company
relationships when there's a set of folks who are always safe from worries.

Now I'm on the outside I keep tabs on how things are going. It's harder to know, but I trust my inference. Artsy's
replacement for a COO eventually landed [a new CEO instead][new-ceo]. It's likely this should bring about about some
leadership stability in the company, though it will be at the trade-off of a new vision and perspective on what the
company is and should do.

Perhaps that's for the best, most folks who I talk to are optimistic.

Even knowing all this, I still bought all my stock when I left. I struggle to see Artsy failing, but maybe not to the
same level of potential it used to have.

### Mismanaged Introduction of a Product Org

Artsy got real far with just design and engineering. A typical tech company would have three sets of roles for the
building of user-facing products: Design, Product and Engineering. At a gross simplification: What it look and feel like
(design), what it should do (product) and how should it work (engineering.)

Artsy's older organization structure stems from the perspective of [Robert Lenne][rl], the company's original head of
product and design. He built a culture of product design within the design team, effectively giving the designers in
Artsy the responsibilities of what should be built within the company. This worked very well when the company was
smaller, but the concept was starting to stretch at the seams as design and development doubled in size.

The answer from leadership was that we needed to split those responsibilities and become a more traditional organization
structure. I agreed with this idea, we'd had great experiences in the past where someone had taken up a product
management role within the auctions team.

The first six months of changing the team's structure were pretty disastrous. For the first time, people who I had hired
left the company and the engineering culture took a hit which it never really recovered from. It felt like quite a lot
of new people were under a lot of pressure to show results very quickly from these team changes, and this created
incentives for people to take shortcuts, or make culture changes hard and fast without necessarily covering all their
bases. People in all aspects of the business felt a loss of control and we spent a long time trying to find ways to get
that feeling back. Gradually, it just kinda re-appeared with time and effort.

Obviously, I don't think there's a world without pressure of some sort - but we'd had many successful and considered
re-orgs within the company over the last 8 years. Every product person and most dev leads involved in figuring out what
that transition should look like (myself including) aren't with the company anymore. Looking back, I keep thinking there
a few places where maybe I could have stepped up more, and I regret I didn't. I even expressed worries about it on two
years ago in [On Being 31]()

It's worth stressing that Artsy engineering was in **a solid place** as I left, this transition happened close to two
years ago and I wouldn't have left if it wasn't going to be OK. The folks working at Artsy today are fun, interesting
and making the art world a better place. If you're considering a job there and somehow found this first,you shouldn't
consider this to be a blocker. The company is different, and stable now - it was just time for me and 2 years of shaky
foundations was enough.

#### Things I am proud of

Writing through to the conclusion of why I left after 8 years can leave a bitter taste on your tongue, but again, I'm
super proud of my work there. I don't really think I can really write up all the things I'm proud of in the last 8 years
at Artsy, too much stuff, a lot if it is covered in this journal, and the [blog post on my 8 years at
Artsy][final-post].

{::nomarkdown}

<details><summary>I really took a long time thinking about how to leave. An aside on how to leave a company after 8 years.</summary>
{:/nomarkdown}

### My Role at Artsy

I'm an Engineer who has been at Artsy since close to the beginning. Artsy has a few pretty complex businesses, and I've
touched most of them in some way. I've always aimed to ensure that engineering in Artsy doesn't feel disconnected to the
rest of the company, and I spend quite a lot of time talking externally (I account for over a quarter of the blog posts
on this site for example) about our work.

Strictly speaking, none (and all) of these are in my job role which has evolved over the years to a kind of
architect-ish role of knowing [a lot about everything][shallow] and mainly assisting people work on those, plus making
infrastructure which allow [others][danger] [to][peril] [do][docs] [more][stitching] with less. Which makes leaving
leaving a bit tricky, I might not own a lot of things, but a lot of my value has been in the soft-skills in-between.

### On Leaving

Reasonably speaking, I'm a pretty open book. For the last 9 years I have publicly written a pretty personal annual
write-up of the ups and downs of my life, my relationships to Open Source and Artsy. They're available on my website
[orta.io][]. Almost all the engineers who I spoke to about leaving said that it fit with my last write-up.

I didn't want to leave until I had deprecated myself.

Regardless, as engineers this should be a constant goal for yourself. Doing so leaves a lot of space for personal growth
for yourself and for the people who will take up the mantle after you.

Throughout my career at Artsy I've changed roles regularly as Artsy has grown and changed. When Artsy needed an iOS
engineering team, I became a manager, then when we moved to React Native and de-siloed the team - we didn't need that
anymore and I went back to being an individual contributor and someone who made more sense took those responsibilities.
This is one of my favourite things about start-ups, they change often. If you're creative, put the time in and are open
to being uncomfortable occasionally then there are all sorts of experiences ahead.

In 2018 what Artsy needed was someone to look holistically at the Engineering team from the inside. I picked up a chunk
of soft-skill responsibilities in order to ensure Artsy's Engineering was in tip-top shape, working on everything from
hiring to team cohesion.

### Rebasing Responsibilities

8 years is a long time! I found quite a few ways to distribute my responsibilities, these aren't just useful tactics if
you're leaving, but valid when your circumstances change.

#### Split your roles into smaller pieces, and with a tighter and more obvious scope

A good example of splitting roles came from owning all of the front-end practice at Artsy. Effectively making sure we
had common goals and were sharing our best ideas across web and mobile. I realised that there were people interested in
owning subsets of the global front-end practice and if I split it into web and iOS they would have the opportunity to
give each platform more focus.

#### Build process changing tools, use them yourself to set an example, then lay off the gas

Throughout 2018 I spent a lot of time improving Artsy's engineering culture, mostly [using RFCs][rfcs]. In 2019 I
stopped creating new RFCs and only worked on RFCs as a co-signer which was owned by someone else.

In 2019, we started to see a much more diverse set of engineers writing new RFCs which give the team access to a lot of
new and interesting ideas and the RFC process has never been as active. I'm really proud of the work others are doing
with this process.

#### Create working groups to allow many people to work on a problem collectively

I have always been a good fallback for ownership of projects which fall between the gaps between teams. For example, I
own our company dashboard and our internal team navigator. While these projects are important but they would really need
an engineering focused on internal tools to get changes added to a roadmap. Given Artsy's size today, that's not likely
to happen.

To try mitigate a single point of failure, I created one of the first engineering working groups in Artsy. With the
focus being an intersection between our workplace team and engineering to keep track of any high impact easy wins for
internal culture. Anyone was welcome to join from engineering, and over time new folks started showing up and helping.

Since then working groups have popped up everywhere in Artsy,

#### Mentor potential successors

I don't expect anyone to directly replace me, but this is a common tactic when leaving, but when someone shows any
related interest - dive in and offer anything to help them. Mid 2018 I opened up some extra 1 on 1 spaces in my calendar
(by consolidating them all to one single day every 2 weeks) and specifically targeted folks who I think would do a good
job at taking some of responsibilities over time.

That said, we [specifically targeted][twitr] getting at least one person who would care about tooling in a way that
echoes my opinions when hiring, and that worked out well. We've been seeing more

#### Document everything

If you do enough [defensive OSS][def-oss], you learn the value of the up-front cost of docs vs long term questions from
people. Even internally I try to write docs for someone's question rather than answering directly. This pattern of
externalizing answers inspires a hefty amount of my blog posts on the Artsy blog, while writing this way can be slower,
that answer can be more thoughtful and better articulated.

I took the time to focus a lot of our documentation across all of engineering into two centralized places (one in the
open (default) one private (fallback)) which dramatically increased the number contributors to team documentation across
the company.

In terms of code documentation, I've been sneaking documentation updates to as many projects as I can. For example, on a
project with a pretty low [number of contributors][energy-contrib] I added documentation specifically aimed at providing
coverage of [features per-screen][energy-map].

##### Cleaning the backlog

When there's a time limit, it really helps you focus on getting some of those long running PRs in. I shipped a feature
that I had been working [on and off for 5 years][folio-album-sync] last month.

I'm currently going through a process of hitting all my backlog posts for the Artsy blog, as well as trying to cement
the reasoning for things I think are worth keeping around. Ultimately though, it's up to the rest of the engineering
team to decide whether a cultural pattern is worth keeping or a project is worth maintaining.

### Give your company the best chance to make a competing offer

I wanted to give Artsy the best chance to compete with an offer like the one from TypeScript. One of the best strategies
for this came up when speaking with Samuel, our VP of Engineering. He recommended that I imagine that I didn't work at
Artsy, and figure out the job role which would be the most attractive to me.

We explored this idea and created a really compelling job role which fit for both Artsy and me. It was a refreshing take
what I've enjoyed from my time with Artsy, and things I'm interested in doing in the future. It ended up like this:

```
## Head of OSS at Artsy

Roughly:
- Make Artsy OSS Awesome
- Help ship big things in parallel work streams with product
- Make it fun and full of growth to be at Artsy

Goal: Ensure Artsy OSS thrives.
Aim: Externally cement that Artsy's tech credentials are solid, and provide external stimulus for Art-world folks to work with us

- ~ 4–5 tech conference talks a year
- ~ 1-2 arts conferences/fairs/panels a year
- ~ 12 solo blog posts per year

- Also:
  - Ensuring every major tech launch has a write-up (e.g. New Selling Options, Show Guide )
  - Ensuring all libraries we OSS are documented, tested, and usable outside of Artsy
  - Helping internal engineers from those teams write public talks about the launches and what we had to build

Goal: Help ship longer-term perspective which runs parallel to the roadmap
Aim: Help make the team make less short-term choices

Work with one other person to ship some of the things Artsy has found difficult to work due to
roadmap tradeoffs, but that we feel needs to get done eventually:

- Explore building standalone services for model domains (artworks/partners/shows etc)
- Work on how we can we standardize admin UIs
- Provide a technical roadmap, and own what it takes to ship an android app
- Own the third party API (handle legal rights, own docs + evolution)
- Consolidate JS tooling into something which sits above express/rails/react-native

These are projects we've regularly said "want to do that, but it'd block shipping X or Y", where
as a team we consciously decide to continue a larger technical debt in favour of shipping something.

Goal: Maintain and improve Artsy's culture
Aim: Make Artsy feel like an awesome place to work

Run events:

- Demo Days
- Lunch & Learns
- Provide more support to initiatives like Artsy Learns to Code
- Explore

Cohesion:
- Focus on 1on1s with product + designers to help them grow
- Run workshops for all of Artsy to help raise technical awareness
```

This takes some of the things I was already doing on the side, and moves them forefront as well as trying to work well
with the rest of the company and ship some big things. I think the idea of "what is an optimal offer for your current
company" is a pretty good pattern for anyone who has a long tenure at a company to explore. It gives your current
company a way to show off it's best attributes and you already have the existing relationships to make it work.

### Letting People Know

I spent a considerable amount of time thinking about this. I'm not sure there's a perfect way, but I can at least talk
to what I did. I had a few aims: tell people individually then in groups, strive for as natural a setting as possible
and make it easy to know who knows so far.

I structured my timeline to look roughly like:

- Inform my manager + direct collaborators when I was taking informationals (maybe 2-3 months prior to signing)
- 1st week after signing - all collaborators, this came to roughly 120 people across the company
- 2nd week, Monday - ensure all dev knows by announcing it at our team stand-up
- 2nd week, Tuesday - email most of the team
- 2nd week, Wednesday - let the internet know

For the first week I used a private slack channel (called the [oort-cloud][oort]) where I added people as I told them,
it turned into a pretty fun support group channel for light-hearted jabs and interesting discussions.

A week is quite a while to keep the announcement somewhat secretive, but in general it held. This gave me the chance to
answer a lot of questions, and I came home drained every night. I feel like I did the right thing.

### Final Days

When I considered what the right thing to do with my final days, I felt tht some of the best value I can give to Artsy
is in providing historical context. That's why I've been shipping so many blog posts in 2019. I'd like to try dig deeper
and pull out some interesting stories from other oldbies at the company. I'm also going to improve our alumni network,
so it's easy to keep in touch with Artsy folks because I'm going to miss a lot of them.

I got a lot of recommendations to take time off between jobs, considering I have been focusing my thinking around Artsy
for a very long time then finding a mental space where you can felt empty sounded compelling.

{::nomarkdown}

</details>
{:/nomarkdown}

It sucks leaving because I feel like I knew almost everyone in the US office, it was just about the [dunbar][dun] number
and I felt like I knew how most people ticked. I loved company-wide events and hanging out with all of the other teams
in the company. As Artsy was mission driven, and the mission was easily applied to most of our jobs then a lot of people
were really trying to improve interacting with the art world. I'm proud that I got to hang out with all these folks and
got to know a lot of them really well. It can be easy to just stay in your lane, but I got a lot of friendships by not
doing that. 6 months on, I still try find a reason to go back for events every 2 months or so.

In the last year, I spent quite a lot of time trying to dig into the history of Artsy to make it easier for others to
get context on what we built in Engineering. One of my favourite examples of this is [the highlights document][highl] I
created for Artsy engineering. This document showcased most of pivotal moments in Artsy engineering, or at least the
ones I could remember (and could poke others into adding) - I'm looking forwards to seeing it in a few years time when
someone else picks it up and tries to match the timelines.

We really did make something special with the iOS team, and we kept our global reputation as we moved from a native
focus to react native one. We were a diverse team with everyone having some polymathic tendencies. That made it a
pleasure to get up to work every day. It's kinda intense that for [4 years][4yr] the iOS team was a tight team, then
within a year from now all but one of us left.

## Interviewing

I chatted with Artsy's leadership folks last year about planning on leaving, and I did the same at the start of 2019
too. In part, I was open to changing my mind but things just didn't really fit anymore. One of the main reasons I stayed
through 2018 was to ensure that leaving didn't break things. I'm sure there's the occasional "argh, this is an orta"
thing happening in the dev team, but I think the time I took to try leave elegantly was worth it.

I'd been wondering what to do next for a year or two. Danger and I narrowed my ideas down to three main options:

- I stay full-time employment and we stick in NYC (because I like NYC, and the city is kinda growing on Danger)
- We both take a break from work and take a break year
- We move back to small-town england, and I try take Peril full-time

While you might know the end-result, these were all pretty solid options. However, to get a sense of what full-time
options were I took the time to do some informational interviews at some of the places [I mentioned last year][32-opt].

The first was a famous private messaging company, and it went bad, the person on the other side of the informational
hadn't taken any time to do research on me. This was disappointing, and not even in a "I'm barely dev-twitter famous"
way. If you don't take the time to prepare to meet someone who could be working with you for years, what other parts of
the culture are not going to be thinking through?

I wondered if people just take informationals less seriously than we did at Artsy. Our then CTO was [adamant][db-info]
that we treat informationals critically as they are the first point of contact to a new hire. That night, I tried to
make sure that Artsy continues to do great informationals by [documenting how I prepared for informationals][doc-info]
and calling a best practice.

The other talks went much better. When split across many amazing opportunities, I had to figure out some tools for
providing focus. I repeatedly asked myself two core questions:

- What team would I feel the most proud to be a part of?
- What team would get the most impact from the sort of engineer I am?

Through these two questions I narrowed down my set of options to TypeScript. Which made the next question TypeScript vs
Peril vs a year off.

While a break would have been nice, the TypeScript team said they really weren't sure if or when they might get
headcount again. I've been in that position, and I could empathize. Given that the timing was lucky for me and it was
something I really wanted to do. I said let's give it a shot.

Peril would have been an interesting choice, months later GitHub continued to do an even better job at replicating all
of the features I built (IMO these are convergent ideas, not 'they stole my idea') and while I could have been a niche
player - that doesn't fit my goals. I care about communities and ecosystems, building a small but well used niche tool
won't satisfy my drive.

## Why TypeScript?

Well roughly: It's a small team building important infrastructure for a lot of people in the open. This is what I've
done in my spare time for the last 7-8 years, and maybe it can work out for full-time work too.

If you don't know what TypeScript is, I'd recommend reading this non-technical post on [what TypeScript is][what-is-ts]
and why its needed. I created it for Artsy folks when I was telling folks I was leaving. Basically JavaScript is the
"English" of the programming world, all programmers are forced to learn it for some reason or other - no one speaks the
same version but everyone kinda gets it. Like English, it's not an elegant language. But, TypeScript is like a good
dictionary and proofreader for your writing, and it turns out you can make some exraordinary prose with time and
patience. TypeScript makes that easier.

I have a fundamental love for developer tooling, and arguably a programming language is the purest form of tools. Within
the JavaScript eco-system, TypeScript found its niche by accepting the flaws in JavaScripts. TypeScript does nothing to
fundamentally change the language. The compiler will give you warnings if it thinks you're doing something you
shouldn't, but it kinda lets you just get away with whatever you want.

This idea extends really far, to the point of most developers using JavaScript are probably using TypeScript with the
errors turned off and don't know it because their editor is doing it "for free".

Before interviewing I had my reservations about Microsoft, but once I realised it might be a real option I started to do
more research than my simpler idea of _"TypeScript and VS Code are good, so maybe Microsoft has changed?"_. Now I'm
fully indoctrinated, but it doesn't feel like the [evil empire borg][sd-wp] from the slashdot era. Microsoft lost, and
got humbled - that's better for everyone.

## Life at Microsoft

https://onezero.medium.com/speaking-truth-to-power-reflections-on-a-career-at-microsoft-90f80a449e36

The TypeScript team is a different bag from Artsy. The TypeScript team is full of incredibly smart engineers with an
exceptional depth in compilers, type-theory and JavaScript's underlying warts. Months into joining this team I'm
regularly in over my head in conversations about how things work in different parts of the compiler. It's likely to be
many years, if ever, that I'll get a similar level of familiarity with the intrinsic (and essential) complexity involved
in a project like TypeScript.

There are many verticals in this one codebase.

For the non-technical, working on TypeScript is working on a compiler - and compilers are _kinda_ like the "rocket
science" of building software. Here's [44 people replying][quora] to why it's so hard to work on a compiler if you want
a baffling mix of "I'm smart, look at my comment" vs "Hrm, yeah, it is kinda tricky". I'm including my favourite quote
for you:

> Writing a compiler is the software equivalent to taking LSD.

> It fundamentally alters your perception of the world. Hard problems get simpler. All the mysterious, arcane, and
> unknowable pieces of computing are reduced to a small, easy to grasp set of principles. And once you understand well
> how the machine executes code, your ability to reason about the performance of other code improves dramatically.

Basically it's hard enough, you think everything else is easy because it's not rocket science and you're Neo from the
matrix - ha!

This sort of depth is not _quite_ my bag, but it's hard to overstate the network effects of creating a compiler. Since I
joined the team, the number of weekly downloads went up from 6 million downloads a week to 8 million. This team is
making one of the fastest growing mature language

## Back on the Talks Horse

For the last two years, I'd taken a break from conference speaking. This is something dear to my heart, but tension at
Artsy and a desire to help Danger get accommodated to New York meant it just wasn't a good trade to accept offers to
speak. But this year both of those things have changed.

I was super lucky to basically have an amazing offer thrown in my lap to speak at BrazilJS within my second month. It
was late notice, but I've got pretty good at making a solid talk in about a week. I flew out and ended up getting stuck
in Panama for a day, so I visited the Panama canal and learned about it's history. Hanging out in Brazil was so cool, it
had been about a decade since I lived there. After a few days, it felt like my portuguese was back to mostly
conversational.

The conference BrazilJS was very cool, run by a bunch of punks with a real inclusive vision.

## Open Source

Late last year GitHub announced a project which [sherlocked][sherlocked] a major side-project of mine, Peril. I had been
working on Peril for about 2 years by that point. I reflect it as being a mixed bag:

> Sometimes, you just get sherlocked.
>
> I can be both happy and sad about it.

I got a lot of use from Peril in Artsy and in my own long-tail open source stuff. After that announcement though, I
slowed down my contributions and simply aimed to make Peril stable, solid and tested. Peril had been an escape valve for
me. Prior to interviewing, I explored what leaving Artsy to work on Peril would look like. I think I could have got
enough people to pay that I could have lived in the UK and just done some good work on a small scale for a while.
Obviously, that's now how it turned out, but it was an option.

I didn't replace that Peril-shaped hole with a new big idea. Useful big ideas only come every few years to me, so
instead I contributed by falling back to my design skills instead. I helped out on the design side a bunch for a series
of large OSS projects [React][rn-rd1] [Native][rn-rd2], [Jest][j-rd] and [GraphQL][gql-rd]. They're different scopes,
but still have a pretty big impact for time.

Since joining TypeScript, one of the interesting things I've noticed about working on the team is that I'm finding I
don't quite have the same incentives for doing OSS anymore.

I used to have a feedback cycle where I'd work on things related to Artsy to fix Artsy problems in my spare time. Now
it's just kinda all TypeScript stuff... Which is less healthy. I'll need to think about what this looks like long-term,
but for now it feels reasonable.

## Flappy Royale

This year I shipped a game. Like a reasonable chunk of last generation's programmers I got into programming by
successively building more and more complex games. First, I started with visual [klik & play][knp]-style projects where
you declare how things can interact. Then once the scale of my ideas grew, so did the amount I control I needed. This
led to a programming language [called BYOND][byond]. My years in that community taught me how to program, and how to
positively interact on a forum with internet randos.

While I built enough games in my teens, it became obvious to me that the underlaying tools to create games held more of
an interest to me. Turned out I was more of a toolmaker than a experience generator. I'd use that passion when exploring
new programming eco-systems. For example, when I explored building for the iPhone after years of building for the Mac,
my first steps was to an environment for teaching how to program text adventure games. [See on being 25][25]. When the
programming language Swift came out, I learned the language by porting that engine to the language.

Present day Orta has less time for doing cool but frivolous things, which is a shame sometimes. Nowadays I tend to learn
only for the sake for something very specific. I feel guilty that I'm not applying my skills in a more constructive way.
That's just one of my core drives, and I'm ok with this.

I never got back to building games until this year. Getting started was a series of happy coincidences. I started
playing handball with an iOS games dev ([Zach Gage][zg]) who took his dog to the same dog socialization classes where we
took our dog Murphy ([see 32][32]).

I had mentioned that I was taking a month between jobs, and didn't really want to hang out at my Manhattan home without
a desk. He offered to let me co-work at his place, I took up his offer. We joked around that the world needs more battle
royales, and that flappy bird was a ripe target. I had planned to take the month to recreate my website, but I never
really got around to that. I wrapped up some of the open source design work I had been doing, and started making a few
sketch files of what a multiplayer Flappy Bird would look like.

Lucky for me, [Em Lazer-Walker][elw] was coming to NYC, and planned to take some time to crash at my house. She also was
in-between jobs (also Microsoft) and had extensive experience building games. She loved the idea and we went all in on
it. We started it in mid-May and finished it in mid-July.

If you don't know Flappy Bird or what a Battle Royale is:

- Flappy Bird is an excruciatingly hard game where you take a bird through a series of pipes. The game was super popular
  for about 2 weeks and the author took the game down and said that he didn't want to be causing the world this much
  pain. A bold move when it was making ~30k a day.

- Battle Royale is a genre of shooter-like games, like the movie of the same name, a Battle Royale is a game where there
  are many players and you try eliminate each other till eventually there's only one person or team left. Fortnite is
  the most prominent example of a battle royale.

Flappy Royale was a mix of a really difficult game with the mechanics of seeing 99 other people also trying to get
through the game. You can't eliminate other people, but when the core game is that hard you don't need to - most players
in most games have died within ~2 seconds. Intense right?

There are a few highlights from working on Flappy Royale:

- Getting to work with my wife. Danger typically is more a namesake than a contributor to my work, but for Flappy Royale
  she made a large amount of our art assets. Including some of my favourite characters. High five to [the Happy
  Chappo][hc] who also made some great work!

- Reading all the reviews! These were websites I regularly read. I had to sit down outside to read this Kotaku one. I
  basically told everyone I met that day out in Seattle.

- The panic once we did the math to figure out how much Flappy Royale could cost us if the traffic didn't go down. I
  genuinely froze for a full day, and didn't feel comfortable making any changes. luckily, Em took over and sorted it
  out bringing the costs down from thousands per month to being in the free tier (now that we're on the tail end of
  traffic.)

Eventually it all calmed down. Considering the numbers ( about 20MM games played, 200,000 players in 3 months ) it's a
bit surprising that it didn't come anywhere close to breaking even (skipping our own wages). We didn't really expect it
to make Flappy millions, but the ad revenue got so low, so quickly that it made more sense to remove the more annoying
ads and just say "those aren't worth making our art more commercial".

When we talked to an ad distributor about it, they said that Flappy Royale just wasn't popular enough in a wealthy
audiences (i.e. not big in japan :D). We weren't relying on the money, but it would have been cool to have been worth
signing all those W3 tax forms.

That made coming back to keep doing updates not feel worth it; it's a trade-off on doing TypeScript work at TypeScript
scale vs a fun game in a crowded scene. It's awesome we did it, I'm glad we got it off the ground.

## Moved to Brooklyn

We moved last year, and we moved again this year. This was triggered by two things, our landlord screwed us over and I
joined Microsoft and would work remote.

The first one is a long-one, but TLDR: They never signed our lease because it said we would have a dog. So, we couldn't
have a dog in our apartment even though we specifically mentioned it multiple times during the signing provcess, and
_y'know_ it was in our lease. This was a long-running problem that didn't have an obvious end.

When it became obvious that I was going to work remote. That added a fire to get stuff moving.

Moving house is expensive in New York, so we weren't particularly excited to have to move apartments twice in a year but
I couldn't work full-time from a living room. I needed a space to work, that could either be a co-working space or at
home. I could probably get Microsoft to pay for a co-working space, but I'd had great experiences at home before, and I
can make myself an office I can be proud of.

We moved from Manhattan to Brooklyn, it's still super expensive, but it's very spacious.

- first day https://twitter.com/orta/status/1138071674450898945

- Fostered Oby

- Danger left Job
- Got off Google
- Started Pursuit Peer Lab?
- Dad's not well
- Dragalia Lost?
- Teeth
- LSD
- OSS design

- Danger + Peril

{::nomarkdown}

</p></div></div>
<div class="clearfix" style="padding:200px 0; background-color: #eafeff; text-align:center;">
  <img src="https://ortastuff.s3.amazonaws.com/site/on_being/32/completed-obra-dinn.png" />
</div>
{:/nomarkdown}

[knp]: https://www.youtube.com/watch?v=LUTpumYboDs
[byond]: https://www.youtube.com/watch?v=gAN-ngbS0ps
[25]: http://orta.io/on/being/25
[32]: http://orta.io/on/being/31
[32]: http://orta.io/on/being/32
[zg]: https://twitter.com/helvetica
[elw]: https://twitter.com/lazerwalker
[hc]: https://www.facebook.com/thehappychappo
[new-ceo]: https://www.crainsnewyork.com/technology/artsy-aims-next-growth-stages-new-leadership
[rl]: http://www.robertlenne.com
[dun]: https://en.wikipedia.org/wiki/Dunbar%27s_number
[32-opt]: https://orta.io/on/being/32#options
[sd-wp]: https://en.wikipedia.org/wiki/Slashdot#cite_ref-wired_bill_gates_of_borg_77-0
[j-rd]: https://github.com/facebook/jest/issues/7265
[rn-rd1]: https://github.com/react-native-community/discussions-and-proposals/issues/122
[rn-rd2]: https://twitter.com/reactnative/status/1158320695937556480
[gql-rd]: https://github.com/graphql/graphiql/issues/978
[final-post]: https://artsy.github.io/blog/2019/05/03/ortas-best-of/
[highl]: https://github.com/artsy/README/blob/master/culture/highlights.md
[what-is-ts]: https://artsy.github.io/blog/2019/04/05/omakase-typescript/
[4yr]: https://twitter.com/orta/status/977669848720445441
[orta.io]: https://orta.io
[rfcs]: /blog/2019/04/11/on-an-rfcs-process/
[twitr]: https://twitter.com/orta/status/954085934781358081
[def-oss]: /blog/2016/07/03/handling-big-projects/#Issues
[energy-contrib]: https://github.com/artsy/energy/graphs/contributors
[energy-map]: https://github.com/artsy/energy/blob/master/docs/feature_map.md
[folio-album-sync]: https://github.com/artsy/energy/pull/189
[danger]: https://artsy.github.io/blog/2017/06/30/danger-one-oh-again/
[peril]: https://artsy.github.io/blog/2017/09/04/Introducing-Peril/
[shallow]: https://artsy.github.io/blog/2018/08/10/On-Context-Switching/
[docs]: https://artsy.github.io/blog/2018/08/21/OSS-by-Default-Docs/
[stitch]: https://artsy.github.io/blog/2018/12/11/GraphQL-Stitching/
[oort]: https://en.wikipedia.org/wiki/Oort_cloud
[sherlocked]: https://www.urbandictionary.com/define.php?term=sherlocked
[quora]: https://www.quora.com/Why-are-compilers-so-hard-to-write

<!-- prettier-ignore-start -->

[db-info]: https://code.dblock.org/2016/08/30/phone-screens-are-harmful-and-the-benefits-of-the-informational-interview.html

[doc-info]: https://github.com/artsy/README/commit/61cbd68a9aa32f773efcee4bc663e9c5c70e82d7#diff-2ea2cc7f82987a23e348d6e905aa52a8R24

<!-- prettier-ignore-end -->
